transaction abort/rollback
- todo
  - FDBObjectStore.createIndex -> deleteIndex
    - these and other functions should be driven at the core by ObjectStore.whatever, to allow easy reversibility without going through the FDB interface
  - FDBObjectStore.deleteIndex -> createIndex
  - FDBDatabase.createObjectStore -> deleteObjectStore
  - FDBDatabase.deleteObjectStore -> createObjectStore (AND ALL THE STATE OF IT!)
  - FDBObjectStore.add -> delete + restore key generator
    - DONE
  - FDBObjectStore.put -> delete + restore key generator (AND SOMEHOW RESTORE ORIGINAL DATA IF NECESSARY!)
    - would be better of the delete was automatically logged in ObjectStore.deleteRecord, rather than manually specified in "rollback" callback. that would require updating tx._rollbackLog from within functions like ObjectStore.deleteRecord, which would require passing rollbackLog to them (to push to)
    - DONE
  - FDBObjectStore.clear -> many storeRecords
    - DONE
  - FDBObjectStore.delete -> SOMEHOW RESTORE ORIGINAL DATA (skip key generator)
    - DONE
  - FDBIndex.delete -> SOMEHOW RESTORE ORIGINAL DATA (skip key generator)
  - FDBIndex.update -> SOMEHOW RESTORE ORIGINAL DATA (skip key generator)
  - versionchange -> http://www.w3.org/TR/IndexedDB/#dfn-steps-for-aborting-a-versionchange-transaction
- every time a mutation is performed, log an operation that would reverse it. then on abort, play those back in reverse.
  - because of this, can't allow readonly transaction concurrent with readwrite!

redo transaction/request lifetime
- current implementations feel a bit hacky/ugly
- multiple readonly transactions should be allowed to run at the same time (but not readwrite, they should be all alone)

objectStoreNames and indexNames should be DOMStringLists
- see https://github.com/facebookarchive/IndexedDB-polyfill/blob/master/indexedDB.polyfill.js#L36
- http://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMStringList
- do real implementations really not support [] indexing?

readonly properties need to actually be readonly
- done in FDBCursor, but messy if other classes need to update a value that is to be presented to the user as readonly, like FDBCursorWithValue.value

use browserify to create bundle for browser
- should somehow export fakeIndexedDB and FDB* classes to window
- then could run on tests (w3c or other) if i rename all the appropriate variables first

share some code between Index and ObjectStore, like getValue, confirmActiveTransaction
- similar thing between open and deleteDatabase

convert tests from web-platform-tests and delete as i go
- missing:
  - comprehensive tests of aborted transaction rollback
  - (because of assert.throws I think) error propagation to transaction rejection
  - multiple transactions interacting, like readwrite blocking another but allowing readonly
  - multiple transactions on the same object stores in multiple connections
  - IDBObjectStore.openCursor with various valid arguments
  - openKeyCursor actually being used to retrieve keys
  - IDBObjectStore.index returns the same or different IDBIndex depending on situation http://www.w3.org/TR/IndexedDB/#widl-IDBObjectStore-index-IDBIndex-DOMString-name
- to fix and contribute back
  - idbfactory_open9 should use val in should_work
  - idbdatabase_close first 'block event fired #' should be 'versionchange event fired #'
  - idbdatabase_createObjectStore11 spelling in title
  - idbobjectstore_openCursor should actually check count
  - idbversionchangeevent - db.abort should be db.onabort
  - idbcursor_advance_index, idbcursor_advance_objectstore - event should be e
  - idbtransaction_abort - remove TODO comment

break events stuff into separate module, maybe fakeDOMEvents
- readonly properties? hidden/non-enumerable properties?

go through and fix all the left comments (todo stuff)

reevaluate all uses of setImmedaite, setTimeout, nextTick

_ properties should be hidden from standard functions
- object.defineProperty enumerable?

structured-clone is not accurate to spec
- https://github.com/tcr/structured-clone/issues/3
- Two IDBCursor.update tests skipped

Other tests
- https://chromium.googlesource.com/chromium/blink/+/72fef91ac1ef679207f51def8133b336a6f6588f/LayoutTests/storage/indexeddb
- https://github.com/mozilla/gecko-dev/tree/master/dom/indexedDB/test
- ideally run these in the browser (and w3c original ones too)

Change comment links to http://www.w3.org/TR/2015/REC-IndexedDB-20150108/ which will be stable

For .filter calls that are deleting items from arrays (such as ObjectStore.deleteRecord) it might be faster to use splice as iterating over the array

default error messages http://www.w3.org/TR/IndexedDB/#dfn-transactioninactiveerror

what if my backend data storage was async?